---
import UserStoredFiles from "../components/userSpecificAssets/UserStoredFiles";
import gitImage from "../assets/git.svg";
import signinImage from "../assets/signin.svg";
import arrowRight from "../assets/arrowRight.svg";
import infoImage from "../assets/info.svg";
import cloneImage from "../assets/clone.svg";
import AuthenticatedUserEmailContainer from "../components/authenticatedUserEmailContainer/AuthenticatedUserEmailContainer";
import SaveButton from "../components/saveButton/SaveButton";
import CloneButton from "../components/cloneButton/CloneButton";
import IframeContainer from "../components/iframeContainer/IframeContainer";
import "../styles/index.css";
import SignIn from "../components/signIn/SignIn";
import SignUp from "../components/signUp/SignUp";
import InstructionsContainer from "../components/instructionsContainer/InstructionsContainer";
---

<div id="csv-visualizer">
  <div class="primaryHalf">
    <div class="header">
      <span id="title">
        <span id="appName">csv-visualizer</span>
        <span id="appNameSubText"
          >| powered by <mark id="libName"> Grafana</mark>
        </span>
        <span>
          <AuthenticatedUserEmailContainer client:only />
        </span>
      </span>

      <span class="headerOptions">
        <div class="tooltip">
        <img id="signinImage" src={signinImage} width="20" alt="SignIn" />
        <span class="tooltiptext">Sign In</span>
      </div>

        <a
          id="gitUrl"
          style="display:none"
          target="_blank"
          href="https://github.com/oceakun/csv-visualizer"></a>
        <div class="tooltip">
          <img id="gitImage" src={gitImage} width="20" alt="Git" />
          <span class="tooltiptext">Github repo</span>
        </div>

        <div class="tooltip">
          <img id="cloneImage" src={cloneImage} width="20" alt="Clone" />
          <span class="tooltiptext">Copy Panel ID</span>
        </div>

        <!-- <CloneButton /> -->
        <div class="tooltip">
        <img
          id="instructionsImage"
          src={infoImage}
          width="20"
          alt="Instructions"
        />
        <span class="tooltiptext">Help</span>
      </div>


      </span>
    </div>

    <div id="actionbuttons">
      <button id="myUploadBtn"> Upload</button>
      <img id="arrowRight" src={arrowRight} width="10" alt="Git" />
      <button id="myVisualizeBtn" disabled> Visualize</button>
      <SaveButton client:only />
    </div>
  </div>
  <div class="">
    <UserStoredFiles client:only />
  </div>
  <div
    class="secondaryHalf"
    style="padding-bottom:56.25%; position:relative; display:block; width: 100%"
  >
    <IframeContainer client:only />
  </div>

  <div id="uploadModal" class="modal">
    <div id="uploadFileModalContent">
      <span class="closeUploadFileSpan">
        <p>X</p></span><br
      />
      <button id="fileSelect">Browse</button>
      <div id="uploadedFileDetailsContainer"></div>
      <form
        id="fileForm"
        action="http://localhost:8080/api/upload"
        method="post"
      >
        <input
          type="file"
          id="fileElem"
          name="file"
          accept=".csv"
          style="display:none"
        />
        <button type="submit" id="formSubmitButton">Submit</button>
      </form>
    </div>
  </div>

  <div id="authModal" class="modal">
    <div id="authModalContent">
      <span class="closeAuthSpan"><p>X</p></span>
      <SignIn client:only />
      <button id="registerButton">Sign-Up</button>
    </div>
  </div>

  <div id="registerModal" class="modal">
    <div id="registerModalContent">
      <span class="closeRegisterSpan"><p>X</p></span>
      <SignUp client:only />
      <!-- <button id="authButton">Sign-In</button> -->
    </div>
  </div>

  <div id="instructionsModal" class="modal">
    <div id="instructionsModalContent">
      <span class="closeInstructionsSpan"><p>X</p></span>
      <InstructionsContainer client:only />
    </div>
  </div>

  <script>
    import axios from "axios";
    import { auth } from "../firebase";
    import { onAuthStateChanged } from "firebase/auth";
    import { currentUserUid, userEmail } from "../store/UserStore";
    import {
      userSpecificAssetsDisplayStatus,
      selectedFileContentDisplayStatus,
      saveButtonDisplayStatus,
    } from "../store/ComponentsDisplayPropertyStore";
    import { newPanelID } from "../store/GrafanaDashboardStore";
    import createNewDataSource from "../grafanaAPICalls/createDataSource";
    import updateDashboard from "../grafanaAPICalls/updateGrafanaDashboard";
    import getDashboard from "../grafanaAPICalls/getCurrentPanelsArray";
    import { useStore } from "@nanostores/react";

    // const $newPanelID = useStore(newPanelID);
    // const panelBaseurl = import.meta.env.PUBLIC_SOLO_PANEL_URL;
    // const currentPanelLink = panelBaseurl + $newPanelID;

    const panelBaseurl = import.meta.env.PUBLIC_SOLO_PANEL_URL;

    // get the signin image
    const signinImage = document.getElementById("signinImage");

    // registerButton
    const registerButton = document.getElementById("registerButton");

    // get the git image
    const gitImage = document.getElementById("gitImage");

    // get the clone image
    const cloneImage = document.getElementById("cloneImage");

    // get the git image
    const instructionsImage = document.getElementById("instructionsImage");

    // get the git anchor tag via id
    const gitUrl = document.getElementById("gitUrl");

    //  get the form via id
    const form = document.querySelector("form");

    // get the myVisualizeBtn
    const myVisualizeBtn = document.getElementById("myVisualizeBtn");

    // get the authModal
    const authModal = document.getElementById("authModal");

    // get the authModal
    const registerModal = document.getElementById("registerModal");

    // get the file upload modal
    const fileUploadModal = document.getElementById("uploadModal");

    // get the instructions modal
    const instructionsModal = document.getElementById("instructionsModal");

    // get the button that opens the modal
    const myUploadBtn = document.getElementById("myUploadBtn");

    // get the <span> element that closes the modal
    const closeUploadFileSpan = document.getElementsByClassName(
      "closeUploadFileSpan"
    )[0];

    // get the <span> element that closes the modal
    const closeAuthSpan = document.getElementsByClassName("closeAuthSpan")[0];

    // get the <span> element that closes the modal
    const closeRegisterSpan =
      document.getElementsByClassName("closeRegisterSpan")[0];

    // get the <span> element that closes the modal
    const closeInstructionsSpan = document.getElementsByClassName(
      "closeInstructionsSpan"
    )[0];

    // get the container storing uploaded file's details
    const uploadedFilesDetails = document.getElementById(
      "uploadedFileDetailsContainer"
    );

    const fileElem = document.getElementById("fileElem");

    const fileSelect = document?.getElementById("fileSelect");

    // event listener for the form submission
    if (form) {
      form.addEventListener("submit", (e) => {
        e.preventDefault();
        myVisualizeBtn.disabled = false;
        const formData = new FormData(form);
        const url = import.meta.env.PUBLIC_FILE_UPLOAD_URL;
        axios
          .post(url, formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          })
          .then((res) => {
            console.log("file upload was successful, response : ", res);
          })
          .catch((err) => {
            console.log("there was an error in file upload : ", err);
          });
      });
    }

    // update user info when auth state changes
    onAuthStateChanged(auth, (user) => {
      if (user) {
        currentUserUid.set(user.uid);
        userEmail.set(user.email);
        userSpecificAssetsDisplayStatus.set("userSpecificAssetsDisplayed");
        saveButtonDisplayStatus.set("saveButtonDisplayed");
        selectedFileContentDisplayStatus.set("selectedFileContentDisplayed");
        console.log("onAuthStateChanged, user exists: ", user);
        console.log("currentUserUid.get() : ", currentUserUid.get());
        console.log("userEmail.get() : ", userEmail.get());
        console.log(
          "userSpecificAssetsDisplayStatus.get() : ",
          userSpecificAssetsDisplayStatus.get()
        );
      } else {
        console.log("onAuthStateChanged, no user signed in ");
        currentUserUid.set("");
        userEmail.set("");
        userSpecificAssetsDisplayStatus.set("userSpecificAssetsNotDisplayed");
        saveButtonDisplayStatus.set("saveButtonNotDisplayed");
        selectedFileContentDisplayStatus.set("selectedFileContentNotDisplayed");
      }
    });

    // 'Visualize' button clicked, call the grafana APIs to create a new panel
    myVisualizeBtn.addEventListener("click", () => {
      console.log("visualize button clicked");
      async function runRequests() {
        try {
          await createNewDataSource();
          await getDashboard();
          await updateDashboard();
        } catch (error) {
          console.error(error);
        }
      }
      runRequests();
    });

    // git image clicked, click gitUrl anchor tag
    gitImage.onclick = function () {
      // navigate to the git repo
      gitUrl?.click();
    };

    // git image clicked, click gitUrl anchor tag
    cloneImage.onclick = function () {
      // copy to clipboard, the currentPanelLink
      const currentPanelURL =
        panelBaseurl + JSON.parse(localStorage.getItem("newPanelId"));
      navigator.clipboard.writeText(currentPanelURL);
    };

    // When the user clicks anywhere outside of the fileUploadModal, close it
    window.onclick = function (event) {
      if (event.target == fileUploadModal) {
        window.localStorage.setItem("fileUploadModal", JSON.stringify("none"));
        fileUploadModal.style.display = JSON.parse(
          window.localStorage.getItem("fileUploadModal") || "{}"
        );
      }
      if (event.target == authModal) {
        window.localStorage.setItem("authModal", JSON.stringify("none"));
        authModal.style.display = JSON.parse(
          window.localStorage.getItem("authModal") || "{}"
        );
      }
      if (event.target == registerModal) {
        window.localStorage.setItem("registerModal", JSON.stringify("none"));
        registerModal.style.display = JSON.parse(
          window.localStorage.getItem("registerModal") || "{}"
        );
      }
      if (event.target == instructionsModal) {
        window.localStorage.setItem(
          "instructionsModal",
          JSON.stringify("none")
        );
        instructionsModal.style.display = JSON.parse(
          window.localStorage.getItem("instructionsModal") || "{}"
        );
      }
    };

    // --------------------------------------------------------------------------------------------

    // 'Upload' button clicked, open the file upload modal
    myUploadBtn.onclick = function () {
      window.localStorage.setItem("fileUploadModal", JSON.stringify("block"));
      fileUploadModal.style.display = JSON.parse(
        window.localStorage.getItem("fileUploadModal") || "{}"
      );
      fileUploadModal.style.flexFlow = "row nowrap";
      fileUploadModal.style.justifyContent = "center";
      fileUploadModal.style.alignItems = "center";
    };

    // When the user clicks on <span> (x), close the fileUploadModal
    closeUploadFileSpan.onclick = function () {
      window.localStorage.setItem("fileUploadModal", JSON.stringify("none"));
      fileUploadModal.style.display = JSON.parse(
        window.localStorage.getItem("fileUploadModal") || "{}"
      );
    };

    fileUploadModal.style.display = JSON.parse(
      window.localStorage.getItem("fileUploadModal") || "{}"
    );

    // --------------------------------------------------------------------------------------------

    // 'signinImage' image clicked, open the authModal
    signinImage.onclick = function () {
      window.localStorage.setItem("authModal", JSON.stringify("block"));
      authModal.style.display = JSON.parse(
        window.localStorage.getItem("authModal") || "{}"
      );
      authModal.style.flexFlow = "row nowrap";
      authModal.style.justifyContent = "center";
      authModal.style.alignItems = "center";
    };

    // When the user clicks on <span> (x), close the authModal
    closeAuthSpan.onclick = function () {
      window.localStorage.setItem("authModal", JSON.stringify("none"));
      authModal.style.display = JSON.parse(
        window.localStorage.getItem("authModal") || "{}"
      );
    };

    authModal.style.display = JSON.parse(
      window.localStorage.getItem("authModal") || "{}"
    );

    // --------------------------------------------------------------------------------------------

    // 'registerButton' image clicked, open the registerModal
    registerButton.onclick = function () {
      window.localStorage.setItem("registerModal", JSON.stringify("block"));
      registerModal.style.display = JSON.parse(
        window.localStorage.getItem("registerModal") || "{}"
      );
      registerModal.style.flexFlow = "row nowrap";
      registerModal.style.justifyContent = "center";
      registerModal.style.alignItems = "center";
    };

    // When the user clicks on <span> (x), close the authModal
    closeRegisterSpan.onclick = function () {
      window.localStorage.setItem("registerModal", JSON.stringify("none"));
      registerModal.style.display = JSON.parse(
        window.localStorage.getItem("registerModal") || "{}"
      );
    };

    registerModal.style.display = JSON.parse(
      window.localStorage.getItem("registerModal") || "{}"
    );

    // --------------------------------------------------------------------------------------------

    // 'instructionsButton' image clicked, open the registerModal
    instructionsImage.onclick = function () {
      window.localStorage.setItem("instructionsModal", JSON.stringify("block"));
      instructionsModal.style.display = JSON.parse(
        window.localStorage.getItem("instructionsModal") || "{}"
      );
      instructionsModal.style.flexFlow = "row nowrap";
      instructionsModal.style.justifyContent = "center";
      instructionsModal.style.alignItems = "center";
    };

    // When the user clicks on <span> (x), close the authModal
    closeInstructionsSpan.onclick = function () {
      window.localStorage.setItem("instructionsModal", JSON.stringify("none"));
      instructionsModal.style.display = JSON.parse(
        window.localStorage.getItem("instructionsModal") || "{}"
      );
    };

    instructionsModal.style.display = JSON.parse(
      window.localStorage.getItem("instructionsModal") || "{}"
    );

    // --------------------------------------------------------------------------------------------

    // function to set uploaded file data
    // const setUploadedFileData = (name, size, type, uploadedAt, lastModified) => {
    //   uploadFileData.set({
    //     fileName: name,
    //     fileSize: size,
    //     fileType: type,
    //     uploadedAt: uploadedAt,
    //     lastModified: lastModified,
    //   });
    // };

    // defining functions for the drag&drop events
    // const dragenter = (e: any) => {
    //   e.stopPropagation();
    //   e.preventDefault();
    // };
    // const dragover = (e: any) => {
    //   e.stopPropagation();
    //   e.preventDefault();
    // };
    // const drop = (e: any) => {
    //   e.stopPropagation();
    //   e.preventDefault();
    //   const dt = e.dataTransfer;
    //   const uploadedAt = new Date();
    //   const files = [...dt.files];
    //   const droppedFile = files[0];
    //   const fileName = droppedFile.name;
    //   const fileSize = droppedFile.size;
    //   const fileLastModified = droppedFile.lastModified;
    //   const fileType = droppedFile.type;
    //   console.log("dropped file : ", droppedFile as any);
    //   window.localStorage.setItem("file", JSON.stringify(droppedFile));
    //   window.localStorage.setItem("fileName", JSON.stringify(fileName));
    //   window.localStorage.setItem("fileSize", JSON.stringify(fileSize));
    //   window.localStorage.setItem(
    //     "fileLastModified",
    //     JSON.stringify(fileLastModified)
    //   );
    //   window.localStorage.setItem("fileType", JSON.stringify(fileType));
    //   // setUploadedFileData(
    //   //   fileName,
    //   //   fileSize,
    //   //   fileType,
    //   //   uploadedAt,
    //   //   fileLastModified
    //   // );

    //   updateFileDetailsContainer();
    //   readUploadedFile();
    // };

    // // adding listeners for drag & drop functionality
    // uploadFileModalContent?.addEventListener("dragenter", dragenter, false);
    // uploadFileModalContent?.addEventListener("dragover", dragover, false);
    // uploadFileModalContent?.addEventListener("drop", drop, false);

    // trigger the event for enabling file input
    fileSelect?.addEventListener(
      "click",
      (e) => {
        if (fileElem) {
          fileElem.click();
        }
      },
      false
    );

    // log the file uploaded via "fileElem"
    if (fileElem) {
      fileElem.onchange = () => {
        const uploadedAt = new Date();
        const files = [...fileElem.files];
        const selectedFile = files[0];
        const fileName = selectedFile.name;
        const fileSize = selectedFile.size;
        const fileLastModified = selectedFile.lastModified;
        const fileType = selectedFile.type;
        console.log("selected file : ", selectedFile as any);
        window.localStorage.setItem("file", JSON.stringify(selectedFile));
        window.localStorage.setItem("fileName", JSON.stringify(fileName));
        window.localStorage.setItem("fileSize", JSON.stringify(fileSize));
        window.localStorage.setItem(
          "fileLastModified",
          JSON.stringify(fileLastModified)
        );
        window.localStorage.setItem("fileType", JSON.stringify(fileType));
        updateFileDetailsContainer();
        // to print the uploaded file
        // readUploadedFile();
      };
    }

    const updateFileDetailsContainer = () => {
      const fileName = JSON.parse(
        window.localStorage.getItem("fileName") || "{}"
      );
      const fileSize = JSON.parse(
        window.localStorage.getItem("fileSize") || "{}"
      );
      const fileLastModified = JSON.parse(
        window.localStorage.getItem("fileLastModified") || "{}"
      );
      const fileType = JSON.parse(
        window.localStorage.getItem("fileType") || "{}"
      );

      const innerHTMLContent = `
		<span id="fileDetails">
		<p id="fileName" style="color:rgb(120, 239, 166);">***** uploaded file *****</p>
		<p id="fileName"> <mark style="background:transparent;color:rgb(124, 58, 237);opacity:0.9">name</mark> : <mark style="background:transparent;color:#f1f296;opacity:0.7">${fileName}</mark></p>
		<p id="fileSize"> <mark style="background:transparent;color:rgb(124, 58, 237);opacity:0.9">size</mark> : <mark style="background:transparent;color:#f1f296;opacity:0.7">${fileSize}  KB</mark></p>
		<p id="fileLastModified"><mark style="background:transparent;color:rgb(124, 58, 237);opacity:0.9">last Modified</mark> : <mark style="background:transparent;color:#f1f296;opacity:0.7">${fileLastModified} epoch</mark></p>
		<p id="fileType"> <mark style="background:transparent;color:rgb(124, 58, 237);opacity:0.9">type</mark> : <mark style="background:transparent;color:#f1f296;opacity:0.7">${fileType}</mark></p>
    
		</span>
		`;

      if (uploadedFilesDetails) {
        uploadedFilesDetails.innerHTML = innerHTMLContent;
      }
    };

    updateFileDetailsContainer();
  </script>
</div>
